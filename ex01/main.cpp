#include "Contact.Class.hpp"std::string truncate(std::string str, size_t width){	if (str.length() > width)		return str.substr(0, width - 1) + ".";	return str;}void	print_str(std::string str) {	std::cout << "|" ;	std::cout << std::left << std::setw(10) << truncate(str, 10);}void	print_int(std::int32_t integer) {	std::cout << "|" ;	std::cout << std::left << std::setw(10) << integer;}class Contact {public:	std::int32_t	index;	std::string		first_name;	std::string		nickname;	std::string		last_name;	std::string		phone_number;	std::string		darkest_secret;	Contact(int id = -1) {		std::cout << "Constructor called" << std::endl;		this->index = id;	}	~Contact(void) {		std::cout << "Destructor called" << std::endl;	}	void	show_contacts(void) {		print_int(this->index);		print_str(this->first_name);		print_str(this->last_name);		print_str(this->nickname);		std::cout << "|" << std::endl;		std::cout << "---------------------------------------------" << std::endl;	}	void	contact_info(void) {		std::cout << "Index : " << this->index << std::endl;		std::cout << "First Name : " << this->first_name << std::endl;		std::cout << "Nickname : " << this->nickname << std::endl;		std::cout << "Last Name : " << this->last_name << std::endl;		std::cout << "Phone Number : " << this->phone_number << std::endl;		std::cout << "Darkest Secret : " << this->darkest_secret << std::endl;	}};class PhoneBook {private:	std::int32_t	index;	std::int32_t	full;	std::string		first_name;	std::string		nickname;	std::string		last_name;	std::string		phone_number;	std::string		darkest_secret;	Contact			Contacts[8];public:	PhoneBook() {		std::cout << "Constructor called" << std::endl;		for (int i = 0; i < 8; ++i)			Contacts[i].index = i + 1;		this->full = 0;		this->reset_id();	}	~PhoneBook() {		std::cout << "Destructor called" << std::endl;	}	void	set_full_id() {		this->full = 7;	}	void	reset_id() {		this->index = -1;	}	void	increment() {		if (this->full >= 7)			this->set_full_id();		this->full++;		if (this->index == 7)			this->reset_id();		this->index++;	}	void	add() {		this->increment();		std::cout << "Enter The First Name : ";		std::cin >> this->first_name;		std::cout << "Enter The Nickname : ";		std::cin >> this->nickname;		std::cout << "Enter The Last Name : ";		std::cin >> this->last_name;		std::cout << "Enter The Phone Number : ";		std::cin >> this->phone_number;		std::cout << "Enter The Darkest Secret : ";		std::cin >> this->darkest_secret;		Contacts[this->index].first_name = this->first_name;		Contacts[this->index].nickname = this->nickname;		Contacts[this->index].last_name = this->last_name;		Contacts[this->index].phone_number = this->phone_number;		Contacts[this->index].darkest_secret = this->darkest_secret;	}	void show (void){		std::string input;		std::cout << "---------------------------------------------" << std::endl;		std::cout << "|" << "index     " << "|" << "first name";		std::cout << "|" << "last name " << "|" << "nickname  " << "|" << std::endl;		std::cout << "---------------------------------------------" << std::endl;		for (int i = 0; i < this->full; ++i) {			Contacts[i].show_contacts();		}		while (true) {			std::cout << "Enter the index of the contact that you want to show all his infos (0 to break): ";			std::cin >> input;			if (std::cin.eof()) 				exit(0);			if (1 <= (int)atoi(input.c_str()) && (int)atoi(input.c_str()) <= toascii(this->full))			{				Contacts[atoi(input.c_str()) - 1].contact_info();				break;			}			if (input == "0")				break;		}	}};int	main(void) {	PhoneBook	pb;	std::string input;	std::cout << std::endl << "The program only accepts ADD, SEARCH and EXIT." << std::endl;	while (true) {		std::cout << "Enter one of those (ADD, SEARCH, EXIT): ";		std::cin >> input;		if (std::cin.eof())			exit(0);		if (input == "ADD")			pb.add();		else if (input == "SEARCH")			pb.show();		else if (input == "EXIT")			exit(0);	}	return (0);}